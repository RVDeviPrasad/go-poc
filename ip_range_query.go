package main

import (
	"fmt"
	"strconv"
	"time"
	"unsafe"
	"strings"
)

type node struct {
	code               byte /*Key_type*/
	depth, left, right int
}

type SubWord struct {
	OffSet int
	Len    int
}

type Value struct {
	SubWords []SubWord
}

type Darts struct {
	Base      []int
	Check     []int
	ValuePool []Value
}

type dartsBuild struct {
	darts   Darts
	used    []bool
	size    int
	keySize int
	key     [][]byte /*Key_type*/
	//freq         []int
	nextCheckPos int
	err          int
}

/*
 TODO this is must
 variable key should be sorted ascendingly
  */
func Build(key [][]byte) *Darts {
	var d = new(dartsBuild)

	d.key = key
	// d.freq = freq
	d.resize(512)

	d.darts.Base[0] = 1
	d.nextCheckPos = 0

	var rootNode node
	rootNode.depth = 0
	rootNode.left = 0
	rootNode.right = len(key)

	siblings := d.fetch(rootNode)
	d.insert(siblings)

	if d.err < 0 {
		panic("Build error")
	}
	return &d.darts
}

func (d *dartsBuild) resize(newSize int) {
	if newSize >= len(d.darts.Base) {
		d.darts.Base = append(d.darts.Base, make([]int, (newSize-len(d.darts.Base)))...)
		d.darts.Check = append(d.darts.Check, make([]int, (newSize-len(d.darts.Check)))...)
		d.used = append(d.used, make([]bool, (newSize-len(d.used)))...)
	} else {
		d.darts.Base = d.darts.Base[:newSize]
		d.darts.Check = d.darts.Check[:newSize]
		d.used = d.used[:newSize]
	}
}

func (d *dartsBuild) fetch(parent node) []node {
	var siblings = make([]node, 0, 2)
	if d.err < 0 {
		return siblings[0:0]
	}
	var prev byte = /*Key_type*/ 0

	for i := parent.left; i < parent.right; i++ {
		if len(d.key[i]) < parent.depth {
			continue
		}

		tmp := d.key[i]

		var cur byte = /*Key_type*/ 0
		if len(d.key[i]) != parent.depth {
			cur = tmp[parent.depth] + 1
		}

		if prev > cur {
			fmt.Println(prev, cur, i, parent.depth, d.key[i])
			fmt.Println(d.key[i])
			panic("fetch error 1")
			d.err = -3
			return siblings[0:0]
		}

		if cur != prev || len(siblings) == 0 {
			var tmpNode node
			tmpNode.depth = parent.depth + 1
			tmpNode.code = cur
			tmpNode.left = i
			if len(siblings) != 0 {
				siblings[len(siblings)-1].right = i
			}

			siblings = append(siblings, tmpNode)
		}

		prev = cur
	}

	if len(siblings) != 0 {
		siblings[len(siblings)-1].right = parent.right
	}

	return siblings
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
func (d *dartsBuild) insert(siblings []node) int {
	if d.err < 0 {
		panic("insert error")
		return 0
	}

	var begin int = 0
	var pos int = max(int(siblings[0].code)+1, d.nextCheckPos) - 1
	var nonZeroNum int = 0
	first := false
	if cap(d.darts.Base) <= pos {
		d.resize(pos + 1)
	}

	for {
	next:
		pos++

		if len(d.darts.Base) <= pos {
			d.resize(pos + 1)
		}

		if d.darts.Check[pos] > 0 {
			nonZeroNum++
			continue
		} else if !first {
			d.nextCheckPos = pos
			first = true
		}

		begin = pos - int(siblings[0].code)
		if len(d.darts.Base) <= (begin + int(siblings[len(siblings)-1].code)) {
			d.resize(begin + int(siblings[len(siblings)-1].code) + 400)
		}

		if d.used[begin] {
			continue
		}

		for i := 1; i < len(siblings); i++ {
			if begin+int(siblings[i].code) >= len(d.darts.Base) {
				fmt.Println(len(d.darts.Base), begin+int(siblings[i].code), begin+int(siblings[len(siblings)-1].code))
			}
			if 0 != d.darts.Check[begin+int(siblings[i].code)] {
				goto next
			}
		}
		break
	}

	if float32(nonZeroNum)/float32(pos-d.nextCheckPos+1) >= 0.95 {
		d.nextCheckPos = pos
	}
	d.used[begin] = true
	d.size = max(d.size, begin+int(siblings[len(siblings)-1].code)+1)

	for i := 0; i < len(siblings); i++ {
		d.darts.Check[begin+int(siblings[i].code)] = begin
	}

	for i := 0; i < len(siblings); i++ {
		newSiblings := d.fetch(siblings[i])
		if len(newSiblings) == 0 {
			var value Value
			//value.Freq = d.freq[siblings[i].left]
			d.darts.Base[begin+int(siblings[i].code)] = -len(d.darts.ValuePool) - 1
			d.darts.ValuePool = append(d.darts.ValuePool, value)
		} else {
			h := d.insert(newSiblings)
			d.darts.Base[begin+int(siblings[i].code)] = h
		}
	}

	return begin
}

func (d *Darts) ExactMatchSearch(key []byte /*Key_type*/, nodePos int) bool {
	b := d.Base[nodePos]
	var p int

	for i := 0; i < len(key); i++ {
		p = b + int(key[i]) + 1
		if b == d.Check[p] {
			b = d.Base[p]
		} else {
			return false
		}
	}

	p = b
	n := d.Base[p]
	if b == d.Check[p] && n < 0 {
		return true
	}

	return false
}

func (d * Darts) GetSize() int {
	s1 := 2*len(d.Base)
	s2 := 2*len(d.Check)
	
	s3 := len(d.ValuePool) * int(unsafe.Sizeof(Value{}))
	for i:= range d.ValuePool{
		s3 = s3 + len(d.ValuePool[i].SubWords) * int(unsafe.Sizeof(SubWord{}))
	}
	s4 := int(unsafe.Sizeof(Darts{}))
	
	return s1+s2+s3+s4
}

func (d *Darts) FirstLessMatchSearch(keypased []byte /*Key_type*/, nodePos int) ([]byte, bool) {
	b := d.Base[nodePos]

	key := make([]byte, len(keypased))
	copy(key, keypased)

	var p int
	oldBSlice := make([]int, 0)
	
	for i := 0; i < len(key); i++ {
		p = b + int(key[i]) + 1
		if b == d.Check[p] {
			oldBSlice = append(oldBSlice, b)
			b = d.Base[p]
		} else {
			if key[i] == 0{
				if i == 0{
					return nil, false
				}
				copy(key, keypased)
				i = len(oldBSlice) - 1
				b = oldBSlice[len(oldBSlice) - 1]
				oldBSlice = oldBSlice[:len(oldBSlice)-1]
			}
			key[i] = key[i] - 1
			for j:=i+1; j<len(key);j++ {
				key[j] = 9
			}
			i = i - 1
			continue
		}
	}

	p = b
	n := d.Base[p]
	if b == d.Check[p] && n < 0 {
		return key, true
	}

	return nil, false
}

func IpIntToIpByteArray(a int) []byte {
	bs := []byte(strconv.Itoa(a))
	for i := range bs {
		bs[i] = bs[i] - 48
	}
	return bs
}

func IpStrToIpInt(ipStr string) int {
	bits := strings.Split(ipStr, ".")
	
	b0, _ := strconv.Atoi(bits[0])
	b1, _ := strconv.Atoi(bits[1])
	b2, _ := strconv.Atoi(bits[2])
	b3, _ := strconv.Atoi(bits[3])
	
	var ipInt int
	ipInt += int(b0) << 24
	ipInt += int(b1) << 16
	ipInt += int(b2) << 8
	ipInt += int(b3)
	
	return ipInt
}

func IpByteArrayToIpStr(ipByt []byte) string {
	for i:= range ipByt {
		ipByt[i] = ipByt[i] + 48 // ascii value of zero is 48
	}
	return string(ipByt)
}

func main() {
	/*
		list of ip addrs,
		ip is in integer format
	*/
	var inta = []int{3756493824,3756494592,3756494848,3756495104,3756495360,3756495616,3756495872,3756496896,3756497408,3756497664,3756498176,3756498432,3756498688,3756498944,3756499968,3756500224,3756500480,3756500736,3756500992,3756501248,3756501504,3756501760,3756502272,3756502528,3756503040,3756503296,3756503552,3756503808,3756504064,3756504256,3756504288,3756504320,3756504576,3756504832,3756505088,3756505344,3756505600,3756506112,3756507136,3756507232,3756507264,3756507392,3756508160,3756508416,3756508672,3756508928,3756509440,3756509696,3756510720,3756510976,3756511232,3756511744,3756512000,3756512256,3756512512,3756512768,3756513024,3756513792,3756514304,3756514816,3756515328,3756515584,3756515840,3756516352,3756516480,3756516608,3756516864,3756517120,3756517376,3756518400,3756518656,3756518912,3756519168,3756519424,3756519936,3756520192,3756520448,3756520960,3756521216,3756521472,3756521728,3756521984,3756522496,3756523264,3756523520,3756531712,3756535808,3756539904,3756562432,3756562688,3756564480,3756566528,3756589055,3756589056,3756589568,3756590080,3756590592,3756590848,3756591104,3756591360,3756591616,3756592128,3756592640,3756593152,3756593664,3756594176,3756594432,3756594688,3756594880,3756594944,3756595200,3756595456,3756595712,3756595968,3756596224,3756596480,3756598784,3756598912,3756599040,3756599296,3756599808,3756600320,3756601344,3756602368,3756603136,3756603328,3756603392,3756603648,3756603904,3756604160,3756604416,3756604928,3756605184,3756605440,3756605952,3756606208,3756606336,3756606464,3756606976,3756607488,3756607744,3756608000,3756609024,3756609536,3756609792,3756610048,3756610560,3756610816,3756611072,3756611328,3756611584,3756611840,3756612096,3756612224,3756612352,3756612608,3756612864,3756613120,3756613632,3756613888,3756614144,3756614656,3756614912,3756615168,3756615296,3756615424,3756615680,3756616192,3756616448,3756616576,3756616704,3756616960,3756617088,3756617216,3756617984,3756618496,3756618752,3756619008,3756619264,3756619776,3756620032,3756620288,3756620352,3756620416,3756620544,3756620800,3756621824,3756627968,3756630016,3756634112,3756636160,3756638208,3756642304,3756643840,3756644352,3756645376,3756646400,3756650496,3756652544,3756653568,3756654080,3756654591,3756654592,3756655104,3756656128,3756656640,3756657152,3756657408,3756657536,3756657664,3756660224,3756660736,3756660992,3756661184,3756661248,3756662272,3756662336,3756662400,3756662528,3756662784,3756663296,3756663552,3756663808,3756664064,3756664576,3756664832,3756665088,3756665280,3756665312,3756665344,3756665600,3756665856,3756666368,3756666496,3756666624,3756666880,3756667136,3756667392,3756668416,3756668672,3756668928,3756669440,3756669952,3756670208,3756670464,3756670976,3756671488,3756672000,3756672256,3756672512,3756673024,3756673280,3756673536,3756674048,3756674560,3756674816,3756675072,3756676608,3756677120,3756681984,3756682240,3756682496,3756682752,3756683264,3756683776,3756684288,3756684544,3756684800,3756685312,3756687360,3756687616,3756687872,3756688384,3756688640,3756688896,3756689152,3756689408,3756689920,3756690432,3756690688,3756690816,3756690944,3756691456,3756691968,3756692224,3756692736,3756692992,3756693504,3756695296,3756695552,3756696064,3756696320,3756696832,3756697088,3756697600,3756697856,3756698112,3756698368,3756698624,3756699136,3756699392,3756701696,3756702208,3756702464,3756702592,3756702720,3756703232,3756703488,3756704256,3756704512,3756704768,3756705792,3756706048,3756707072,3756707328,3756707584,3756707840,3756708352,3756709888,3756710400,3756710656,3756710784,3756710912,3756711936,3756712960,3756713216,3756713984,3756714496,3756714560,3756714752,3756715008,3756716032,3756716288,3756716544,3756717056,3756717568,3756717824,3756717952,3756718848,3756718976,3756719104,3756719872,3756720128,3756720640,3756720896,3756721152,3756721408,3756721664,3756722432,3756722688,3756723200,3756723456,3756724224,3756724736,3756725248,3756726016,3756726080,3756726144,3756726272,3756728320,3756728576,3756728832,3756730368,3756730880,3756730976,3756731008,3756731136,3756731392,3756732160,3756732416,3756733440,3756733952,3756736000,3756736512,3756736768,3756737024,3756738560,3756739072,3756739328,3756739584,3756740096,3756740608,3756741632,3756741888,3756742656,3756742912,3756743168,3756743680,3756744320,3756744448,3756744704,3756745216,3756746496,3756747264,3756747520,3756748800,3756749056,3756749824,3756750080,3756751104,3756751360,3756751872,3756752128,3756753152,3756753408,3756753920,3756754112,3756754176,3756754432,3756754688,3756755200,3756755456,3756755968,3756757248,3756758016,3756758080,3756758144,3756758272,3756759808,3756760064,3756760320,3756761344,3756761600,3756762112,3756762368,3756762624,3756762880,3756763136,3756763392,3756763648,3756764160,3756764416,3756764640,3756764672,3756765184,3756765696,3756766208,3756766976,3756767744,3756768000,3756768256,3756768768,3756769024,3756769280,3756769792,3756770304,3756770560,3756770816,3756771072,3756771328,3756771584,3756772096,3756772352,3756772608,3756773376,3756773888,3756774144,3756774400,3756774656,3756774912,3756775168,3756777728,3756777984,3756778496,3756779520,3756780032,3756780288,3756780544,3756780800,3756781568,3756783104,3756783360,3756783616,3756784640,3756785664,3756785920,3756786432,3756786688,3756787200,3756787456,3756787712,3756787968,3756788736,3756788992,3756789504,3756789760,3756790272,3756790528,3756790784,3756791040,3756791296,3756791808,3756792064,3756792576,3756792832,3756793088,3756793600,3756794112,3756794368,3756794624,3756794880,3756796160,3756796416,3756796672,3756797184,3756797440,3756798208,3756798464,3756798720,3756798976,3756799488,3756799744,3756800000,3756800256,3756800512,3756801024,3756802048,3756802304,3756802560,3756802816,3756803584,3756803840,3756804096,3756805376,3756805632,3756805760,3756805888,3756806144,3756807424,3756807680,3756807936,3756808192,3756809472,3756809728,3756810240,3756810496,3756810752,3756811008,3756811264,3756811520,3756811776,3756813312,3756813440,3756813568,3756814336,3756814848,3756815104,3756815360,3756815872,3756816384,3756816896,3756817408,3756817664,3756817920,3756818176,3756818432,3756818688,3756818944,3756819456,3756819968,3756820224,3756820480,3756820992,3756821504,3756822016,3756822784,3756823040,3756823296,3756823552,3756824064,3756824320,3756824576,3756824832,3756825088,3756825152,3756825216,3756826624,3756826880,3756827392,3756827648,3756827904,3756827968,3756828160,3756828672,3756828928,3756829184,3756829440,3756829696,3756829952,3756830464,3756830976,3756831744,3756832256,3756832768,3756832960,3756833024,3756835840,3756836096,3756836352,3756836864,3756837376,3756838400,3756838912,3756839424,3756839936,3756840448,3756840512,3756840576,3756840704,3756843776,3756844032,3756844544,3756844672,3756844800,3756845056,3756846080,3756847104,3756847360,3756847616,3756847872,3756848128,3756850432,3756850688,3756850944,3756851200,3756854016,3756854080,3756854272,3756867584,3756867840,3756871936,3756872704,3756879360,3756879616,3756882432,3756882688,3756883200,3756883456,3756883712,3756889088,3756889344,3756889600,3756889856,3756890112,3756911872,3756912128,3756914176,3756914688,3756915712,3756916224,3756916480,3756916736,3756918272,3756918528,3756920832,3756921344,3756922880,3756923136,3756923392,3756923904,3756924416,3756924672,3756924928,3756925952,3756926976,3756928768,3756929024,3756930304,3756930560,3756931072,3756932096,3756932864,3756933120,3756933376,3756933632,3756936192,3756936704,3756936960,3756937216,3756937728,3756937920,3756937984,3756938240,3756938752,3756939264,3756939520,3756939776,3756940032,3756940288,3756940800,3756941312,3756943872,3756944384,3756945408,3756945920,3756946688,3756946944,3756948992,3756949504,3756951552,3756952576,3756953088,3756953344,3756953600,3756954624,3756954880,3756955136,3756955648,3756956928,3756957184,3756960256,3756960768,3756961280,3756961536,3756961760,3756961792,3756962816,3756963328,3756963840,3756964352,3756964864,3756965376,3756965888,3756972288,3756972544,3756973568,3756974080,3756975104,3756975616,3756976128,3756976896,3756978688,3756978944,3756980736,3756981248,3756981760,3756982271,3756982272,3756982784,3756984064,3756984576,3756984832,3756985856,3756986112,3756986368,3756990464,3756992512,3756994560,3757015040,3757023232,3757027328,3757031424,3757035520,3757036544,3757044736,3757045248,3757047807,3757047808,3757080576,3757081088,3757083648,3757083904,3757084672,3757086720,3757088768,3757092864,3757129728,3757134848,3757137920,3757146112,3757178880,3757187072,3757203456,3757211648,3757219840,3757221888,3757260800,3757262848,3757301760,3757318144,3757319168,3757326336,3757334528,3757342720,3757350912,3757359104,3757375488,3757379584,3757381632,3757408256,3757416448,3757424640,3757441024,3757449216,3757457408,3757461504,3757465600,3757518848,3757522944,3757539328,3757551616,3757555712,3757572096,3757834240,3757835779,3757835780,3757838336,3757838592,3757838848,3757839360,3757840128,3757840384,3757841920,3757842432,3757842688,3757842753,3757842754,3757842763,3757842764,3757842897,3757842898,3757842944,3757843456,3757843813,3757843814,3757844161,3757844164,3757846528,3757850112,3757850164,3757850166,3757850368,3757850624,3757867008,3757875200,3757875520,3757875584,3757876224,3757876480,3757878528,3757878784,3757879040,3757879296,3757879552,3757879808,3757881344,3757881856,3757882368,3757882624,3757882880,3757883392,3757891584,3757899776,3757916160,3757965312,3758030848,3758032896,3758033408,3758033559,3758033560,3758034677,3758034680,3758034944,3758035623,3758035624,3758036992,3758039040,3758047232,3758063616,3758064640,3758064752,3758064768,3758064896,3758064950,3758064951,3758065152,3758065920,3758066112,3758066144,3758066176,3758068992,3758069184,3758069216,3758069248,3758070528,3758070656,3758070784,3758072064,3758072192,3758072256,3758072320,3758072576,3758072608,3758072624,3758072832,3758073088,3758073120,3758073344,3758079890,3758079891,3758080000,3758088192,3758088448,3758088704,3758088960,3758089216,3758089472,3758089504,3758089536,3758089728,3758090240,3758090292,3758090294,3758090496,3758090752,3758090768,3758090776,3758090784,3758090816,3758091008,3758091264,3758092288,3758093312,3758093440,3758093504,3758093568,3758094080,3758094144,3758094336,3758095360,3758095616,3758095872,3758096128,3758096384,4264689920,4264690176,4264690432,4264690688,4264690944,4264691200,4264691456,4264691712,4264691968,4264692224,4264692480,4264692736,4264692992,4264693248,4264693504,4264693760,4264694016,4264694272,4264694528,4264694784,4264694839,4264694840,4264695040,4264695095,4264695096,4264695296,4264695351,4264695352,4264695552,4264695607,4264695608,4264695808,4264696064,4264696320,4264696576,4264696832,4264697088,4264697344,4264697600,4264697856,4264698112,4264698368,4264698624,4264698880,4264699136,4264699392,4264699648,4264699904,4264700160,4264700416,4264700672,4264700928,4264701184,4264701440,4264701696,4264701952,4264702208,4264702464,4264702720,4264702976,4264703232,4264703488,4264704055,4264704056,4278190080,4278190081}
	
	/*
		convert each ip addrs into byte array
		3756657152 -> [3,7,5,6,6,5,7,1,5,2]
	*/
	baaray := make([][]byte, 0)
	for i:= range inta {
		baaray = append(baaray, IpIntToIpByteArray(inta[i]))
	}
	

	dart := Build(baaray)
	fmt.Println("original ip addrs", baaray[0])

	baaray[0][6] = 9
	//baaray[1][7] = 9
	baaray[0][8] = 0
	baaray[0][9] = 0
	fmt.Println("modified ip addrs", baaray[0])

	t:=time.Now()
	matchedIp, _ := dart.FirstLessMatchSearch(baaray[0], 0)
	sz := dart.GetSize()
	fmt.Println("matched ip addrs (* must be original ip)", matchedIp, time.Since(t), sz)
}
